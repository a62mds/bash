#!/bin/bash
##
# Creates a new C++ project directory with basic Makefile, source, and test
# files.
#
# usage:
#   newCppProject <project-name>
# -> if project-name is not provided, prints usage info and exits with status 2
##

##
# Function definitions
# 
# prints usage information to stderr
function printusage {
	echo "Usage: newCppProject <project-name>" >&2
}
#
# creates src/main.cpp
function genmaincpp {
echo "// $PROJ_NAME
// $1

int main(int argc, char* argv[]) {
	//<++>
	return 0;
}

//EOF" > "$1"
}
#
# creates tests/<project-name>_tests.cpp
function genmaintestcpp {
echo "// $PROJ_NAME
// $1

#define BOOST_TEST_MODULE $PROJ_NAME
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(test_suite1)

BOOST_AUTO_TEST_CASE(tautology) {
	BOOST_CHECK(1 == 1);
}

BOOST_AUTO_TEST_SUITE_END()

//EOF" > "$1"
}
#
# creates a basic Makefile
function genmakefile {
echo "# $PROJ_NAME
# $1

CMPL=g++ -std=c++11
CFLG=-I.

SRC=$F_MAIN_CPP
DEP=
OBJ=\$(SRC:%.cpp=%.o)
EXE=$PROJ_NAME

TST_SRC=$F_MAIN_TESTS_CPP
TST_OBJ=\$(TST_SRC:%.cpp=%.o)
TST_EXE=\$(EXE)_tests

.PHONY: compile set_perms run clean compile_tests run_tests

compile: \$(EXE) | run_tests clean

set_perms:
	@chmod +x \$(EXE)
	@chmod +x $DIR_TESTS/\$(TST_EXE)

run: \$(EXE) | set_perms
	@./\$(EXE)

clean:
	@rm -f $DIR_BUILD/* $DIR_TBUILD/*

compile_tests: \$(TST_EXE)

run_tests: \$(TST_EXE) | set_perms
	@./$DIR_TESTS/\$(TST_EXE)

\$(EXE): \$(OBJ)
	\$(CMPL) -o \$@ $DIR_BUILD/\$^ \$(CFLG)

%.o: src/%.cpp \$(DEP)
	\$(CMPL) -c -o $DIR_BUILD/\$@ $< \$(CFLG)

\$(TST_EXE): \$(TST_OBJ)
	\$(CMPL) -o $DIR_TESTS/\$@ $DIR_TBUILD/\$^ \$(CFLG)

\$(TST_OBJ): $DIR_TESTS/\$(TST_SRC) \$(DEP) 
	\$(CMPL) -c -o $DIR_TBUILD/\$@ $< \$(CFLG)

#EOF" > "$1"
}
#
## 

##=============================================================================
# Script starts here

# Ensure project name has been provided
if [ $# -ne 1 ]; then
	printusage
	exit 2
else
	PROJ_NAME="$@"
fi

# Directories
DIR_BIN=bin
DIR_BUILD=build
DIR_DOC=doc
DIR_INCL=include
DIR_LIB=lib
DIR_ETC=spike
DIR_SRC=src
DIR_TESTS=tests
DIR_TBUILD="$DIR_TESTS/$DIR_BUILD"

# Files
F_MAIN_CPP=main.cpp
F_MAIN_TESTS_CPP="${PROJ_NAME}_tests.cpp"
F_MAKEFILE=Makefile

# Create directory structure
mkdir -p "$DIR_BIN" \
				 "$DIR_BUILD" \
				 "$DIR_DOC" \
				 "$DIR_INCL" \
				 "$DIR_LIB" \
				 "$DIR_ETC" \
				 "$DIR_SRC" \
				 "$DIR_TESTS" \
				 "$DIR_TBUILD"

# Filenames
MAIN_CPP="$DIR_SRC/$F_MAIN_CPP"
MAIN_TESTS_CPP="$DIR_TESTS/$F_MAIN_TESTS_CPP"

# Create src/main.cpp if it doesn't already exist
if [ -f "$MAIN_CPP" ]; then
	echo "Not overwriting existing file $MAIN_CPP"
else
  echo "Creating file $MAIN_CPP"
  genmaincpp $MAIN_CPP
fi

# Create tests/<project_name>_tests.cpp
if [ -f "$MAIN_TESTS_CPP" ]; then
	echo "Not overwriting existing file $MAIN_TESTS_CPP"
else
  echo "Creating file $MAIN_TESTS_CPP"
  genmaintestcpp $MAIN_TESTS_CPP
fi

# Create Makefile
if [ -f "$F_Makefile" ]; then
	echo "Not overwriting existing file $F_MAKEFILE"
else
	echo "Creating file $F_MAKEFILE"
	genmakefile $F_MAKEFILE
fi
