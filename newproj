#!/bin/bash
##
# Call from within home directory of a new coding project to set up the
# appropriate directory structure and create the necessary setup files.
#
# usage:
#   newproj {cpp|python|scala} <project-name>
# -> if programming language is not provided or not recognized, exits with error
#    status 2
# -> if project-name is not provided, prompts user for one
# -> if directory with same name already exists, exits with error status 2
##

# Error messages
UNRECOG_LANG_ERR="Programming language unrecognized"
DIR_EXISTS_ERR="Directory already exists"
OPT_NOT_RECOG_ERR="Invalid option"
OPT_REQ_ARG_ERR="Option requires an argument"
WRONG_ARG_NUM_ERR="Wrong number of arguments"
# Prints error message to stdout
function printusage {
	echo "
	Usage: newproj -l {cpp|python|scala} -n <project-name> {-a|-o|-q}
	Help:  newproj -h" >&2
}

# Prints help menu
function printhelp {
	echo "Help menu" >&1
}

# If called with the single option -h, display help menu.
if [ $# = 1 ] && [ "$1" = "-h" ]; then
	printhelp
	exit 0
fi

# Process options supplied as arguments
while getopts ":l:n:a" opt; do
	case "$opt" in
		l)
			PROG_LANG="$OPTARG"
			echo "Language:     $OPTARG"
			;;
		n)
			PROJ_NAME="$OPTARG"
			echo "Project Name: $OPTARG"
			;;
		a)
			ADD_TO_DIR=true
			;;
		\?)
			echo "$OPT_NOT_RECOG_ERR: -$OPTARG" >&2
			printusage
			exit 2
			;;
		:)
			echo "$OPT_REQ_ARG_ERR: -$OPTARG" >&2
			printusage
			exit 2
			;;
	esac
done

# Ensure programming language has been specified
if [[ -z "$PROG_LANG" ]]; then
	while true; do
		read -r -p "Language? {cpp|python|scala}: >> " PROG_LANG
		# if user enters empty string (just presses enter), keep requesting 
		if ! [[ -z "$PROG_LANG" ]]; then break; fi
	done
fi

# Ensure project name has been provided
if [[ -z "$PROJ_NAME" ]]; then
	while true; do
		read -r -p "Enter project name: >> " PROJ_NAME
		if ! [[ -z "$PROJ_NAME" ]]; then break; fi
	done
fi

# If directory already exists, either overwrite, add to existing, or exit with
# error status, depending on options provided
if [ -d "$PROJ_NAME" ]; then
	if [ "$OVERWRITE" = true ]; then
		rm -rf "$PROJ_NAME" && mkdir "$PROJ_NAME" && cd "$PROJ_NAME"
	elif [ "$ADD_TO_DIR" = true ]; then
		cd "$PROJ_NAME"
	else
		echo "$DIR_EXISTS_ERR" >&2
		exit 2
	fi
else
	mkdir "$PROJ_NAME" && cd "$PROJ_NAME"
fi

# Run appropriate script to set up language-specific directory structures and
# to write the necessary setup files to the new directory
case "$PROG_LANG" in
	"cpp")
		newCppProject "$PROJ_NAME";;
	"python")
		newPythonProject "$PROJ_NAME";;
	"scala")
		newScalaProject "$PROJ_NAME";;
	*)
		echo "$UNRECOG_LANG_ERR" >&2
		printusage
		cd .. && rm -rf "$PROJ_NAME"
		exit 2
esac
